#include <iostream>
using namespace std;
const int MIN_NR = 10, MAX_NR = 99, MIN_LS = 5, MAX_LS = 20;
class DoublyLinkedList {
private:
struct Node {
int data;
Node* prev;
Node* next;
Node(int val, Node* p = nullptr, Node* n = nullptr) {
data = val;
prev = p;
next = n;
}
};
Node* head;
Node* tail;
public:
DoublyLinkedList() { head = nullptr; tail = nullptr; }
void push_back(int value) {
Node* newNode = new Node(value);
if (!tail)
head = tail = newNode;
else {
tail->next = newNode;
newNode->prev = tail;
tail = newNode;
}
}
void push_front(int value) {
Node* newNode = new Node(value);
if (!head)
head = tail = newNode;
else {
newNode->next = head;
head->prev = newNode;
head = newNode;
}
}
void delete_val(int value) {
if (!head) return;
Node* temp = head;
while (temp && temp->data != value)
temp = temp->next;
if (!temp) return;
if (temp->prev)
temp->prev->next = temp->next;
else
head = temp->next;
if (temp->next)
temp->next->prev = temp->prev;
else
tail = temp->prev;
delete temp;
}
void delete_pos(int position) {
if (!head) return;
if (position < 0) return;
Node* temp = head;
for (int i = 0; temp != nullptr && i < position; ++i) {
temp = temp->next;
}
if (!temp) return;
if (temp->prev)
temp->prev->next = temp->next;
else
head = temp->next;
if (temp->next)
temp->next->prev = temp->prev;
else
tail = temp->prev;
delete temp;
}
void pop_front() {
if (!head) return;
Node* temp  == head;
head = head->next;
if (head)
head->prev = nullptr;
else
tail = nullptr;
delete temp;
}

void pop_back () {
if (!tail) return;
Node* temp = tail;
tail = tail->prev;
if (tail)
tail->next = nullptr;
else
head = nullptr;
delete temp ;
}
void print() {
Node* current = head;
if (!current) return;
while (current) {
cout << current->data << " ";
current = current->next;
}
cout << endl;
}
void print_reverse() {
Node* current = tail;
if (!current) return;
while (current) {
cout << current->data << " ";
current = current->prev;
}
cout << endl;
}
~DoublyLinkedList() {
while (head) {
Node* temp = head;
head = head->next;
delete temp;
}
}
};
int main() {
srand(time(0));
DoublyLinkedList list;
int size = rand() % (MAX_LS - MIN_LS + 1) + MIN_LS;
for (int i = 0; i < size; ++i) {
list.push_back(rand() % (MAX_NR - MIN_NR + 1) + MIN_NR);
}
cout << "Initial list forward: ";
list.print();
cout << "Initial list backward: ";
list.print_reverse();
list.pop_front();
cout << "After pop_front(), list forward: ";
list.print();
list.pop_back();
cout << "After pop_back(), list forward: ";
list.print();
list.delete_val(rand() % (MAX_NR - MIN_NR + 1) + MIN_NR);
cout << "After delete_val(), list forward: ";
list.print();
list.delete_pos(2);
cout << "After delete_pos(2), list forward: ";
list.print();
return 0;
}
